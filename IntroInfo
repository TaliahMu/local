def Function(a,b=100,c=1):
    """
    a. Enter a dictionary that includes animal_id, session, and scan_idx
    b. Enter the number of frames to average to display image
        -Default is 100
    c. Enter which field to view
        -Default is 1
    Returns: Number of files for the scan, size and number of frames for each
    file, number of frames used for averaging to store tif files, and an example
    image using the average of the sampled frames.
    """
    key = a
    sample = b
    ############################################################
    #DISPLAYS NUMBER OF FILES FOR THE SCAN
    import glob
    scan_filename = (experiment.Scan() & key).local_filenames_as_wildcard
    nfiles = len(glob.glob(scan_filename))
    print('This scan has {} file(s).'.format(nfiles))
    ############################################################
    #DISPLAYS SIZE AND NUMBER OF FRAMES FOR EACH FILE
    import os
    for i in range(nfiles):
        x = str(i+1)
        if i <= 8:
            filename = scan_filename[:-5] + '_0000{}.tif'.format(x)
        elif 98 >= i >= 9:
            filename = scan_filename[:-5] + '_000{}.tif'.format(x)
        elif 998 >= i >= 99:
            filename = scan_filename[:-5] + '_00{}.tif'.format(x)
        y = os.path.getsize(filename) / 1000000
        y = str(round(y,1))
        scan = scanreader.read_scan(filename)
        z = scan.num_frames
        print('File {} is {} MB and has {} frames.'.format(x,y,z))
    #shorten to just print one statement for each file that is the same size
    #############################################################
    #DISPLAYS AVERAGING?????
    z = 1 #find out what the averaging was set to
    print('Averaging {} frame(s).'.format(z))
    #############################################################
    #DISPLAYS EXAMPLE IMAGE
    scan = scanreader.read_scan(scan_filename)
    nframes = scan.num_frames
    stepsize = int(nframes/sample)
    ch1 = scan[(c-1),:,:,0,0:nframes:stepsize].mean(axis=-1)
    green = ch1/(np.max(ch1)*.8)
    if scan.num_channels == 2:
        ch2 = scan[(c-1),:,:,1,0:nframes:stepsize].mean(axis=-1)
        red = ch2 / (np.max(ch2)*.2)
    else:
        red = np.zeros(np.shape(ch1))
    blue = np.zeros(np.shape(ch1))
    image = np.stack([red,green,blue],-1)
    plt.imshow(image)
    plt.axis('off')
